def max_profit_with_2_transactions(prices):
    n = len(prices)
    if n == 0:
        return 0

    # Step 1: Create two arrays to store max profit till day i (left) and from day i (right)
    left = [0] * n
    right = [0] * n

    # Left: Max profit if we sell on or before day i
    min_price = prices[0]
    for i in range(1, n):
        min_price = min(min_price, prices[i])
        left[i] = max(left[i-1], prices[i] - min_price)

    # Right: Max profit if we buy on or after day i
    max_price = prices[-1]
    for i in range(n-2, -1, -1):
        max_price = max(max_price, prices[i])
        right[i] = max(right[i+1], max_price - prices[i])

    # Combine left and right to get max profit with 2 transactions
    max_profit = 0
    for i in range(n):
        max_profit = max(max_profit, left[i] + right[i])

    return max_profit

# Example: Prices at different times in the day
prices = list(map(int, input("Enter stock prices separated by space: ").split()))
profit = max_profit_with_2_transactions(prices)
print("Maximum profit with at most 2 transactions:", profit)
