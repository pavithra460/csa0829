def max_profit_with_two_transactions(prices):
    if not prices or len(prices) < 2:
        return 0

    n = len(prices)
    left_profit = [0] * n
    right_profit = [0] * n

    # Left pass: max profit if sold at or before day i
    min_price = prices[0]
    for i in range(1, n):
        min_price = min(min_price, prices[i])
        left_profit[i] = max(left_profit[i-1], prices[i] - min_price)

    # Right pass: max profit if bought at or after day i
    max_price = prices[-1]
    for i in range(n-2, -1, -1):
        max_price = max(max_price, prices[i])
        right_profit[i] = max(right_profit[i+1], max_price - prices[i])

    # Combine both profits
    max_total_profit = 0
    for i in range(n):
        max_total_profit = max(max_total_profit, left_profit[i] + right_profit[i])

    return max_total_profit

# Example usage
prices = [3, 3, 5, 0, 0, 3, 1, 4]
profit = max_profit_with_two_transactions(prices)

print("Maximum profit with at most 2 transactions:", profit)
